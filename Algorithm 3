using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the countingValleys function below.
    static int countingValleys(int n, string s) {
      var arrayString = s.ToCharArray();
      int noOfValleys = 0;
      char? prevVariable = null;
      int count = 0;
         for(int i =0; i < n ; i++){
        
            if(arrayString[i] == 'D'){
                 count--; 
            } 
            if(arrayString[i] == 'U'){
                 count++; 
            }  
            if (count == 0 && arrayString[i] == 'U')
               {  
                 noOfValleys++;    
               }
             //if (arrayString[i] == 'U' && i != 0){
                // if (count > 0 && prevVariable == 'D')
              // {  
               //    noOfValleys++;    
               //}
               //  count ++;
             //}
              
               
            // if (arrayString[i] == 'D'){
                 //count ++;
                 //if (count % 2 == 0){
                   //if ( prevVariable == 'D'){
                   // noOfValleys++; 
                  // }
                  
                 //}
            // }
              prevVariable = arrayString[i];
         }
          return noOfValleys;
    }
      
    

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        string s = Console.ReadLine();

        int result = countingValleys(n, s);

        textWriter.WriteLine(result);
        textWriter.Flush();
        textWriter.Close();
    }
}
g
